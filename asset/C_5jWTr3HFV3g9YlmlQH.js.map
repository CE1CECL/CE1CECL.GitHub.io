{"version":3,"file":"C_5jWTr3HFV3g9YlmlQH.js","sources":["../../src/stores/MessageStore.ts"],"sourcesContent":["import { MessageType, type APIMessage } from \"@spacebarchat/spacebar-api-types/v9\";\nimport type { IObservableArray } from \"mobx\";\nimport { action, computed, makeObservable, observable } from \"mobx\";\nimport useLogger from \"../hooks/useLogger\";\nimport Logger from \"../utils/Logger\";\nimport AppStore from \"./AppStore\";\nimport Message, { MessageLike } from \"./objects/Message\";\nimport User from \"./objects/User\";\n\nexport interface MessageGroup {\n\tauthor: User;\n\tmessages: MessageLike[];\n}\n\nexport default class MessageStore {\n\tprivate readonly app: AppStore;\n\tprivate readonly channelId;\n\tprivate readonly logger: Logger;\n\n\t@observable private readonly messages: IObservableArray<Message>;\n\n\tconstructor(app: AppStore, channelId: string) {\n\t\tthis.app = app;\n\t\tthis.channelId = channelId;\n\t\t// eslint-disable-next-line react-hooks/rules-of-hooks\n\t\tthis.logger = useLogger(\"MessageStore.ts\");\n\n\t\tthis.messages = observable.array([]);\n\n\t\tmakeObservable(this);\n\t}\n\n\t@action\n\tadd(message: APIMessage) {\n\t\tthis.messages.push(new Message(this.app, message));\n\t}\n\n\t@action\n\taddAll(messages: APIMessage[]) {\n\t\tmessages.forEach((message) => this.add(message));\n\t}\n\n\tget(id: string) {\n\t\treturn this.messages.find((message) => message.id === id);\n\t}\n\n\thas(id: string) {\n\t\treturn this.messages.some((message) => message.id === id);\n\t}\n\n\t@action\n\tremove(id: string) {\n\t\tconst message = this.get(id);\n\t\tif (!message) {\n\t\t\treturn;\n\t\t}\n\t\tthis.messages.remove(message);\n\t}\n\n\t@action\n\tupdate(message: APIMessage) {\n\t\tconst oldMessage = this.get(message.id);\n\t\tif (!oldMessage) {\n\t\t\treturn;\n\t\t}\n\t\tconst newMessage = new Message(this.app, message);\n\t\t// replace\n\t\tthis.messages[this.messages.indexOf(oldMessage)] = newMessage;\n\t}\n\n\t@computed\n\tget count() {\n\t\treturn this.messages.length;\n\t}\n\n\t@computed get groups(): MessageGroup[] {\n\t\t// Sort messages by timestamp in descending order (most recent first)\n\t\tconst sortedMessages: MessageLike[] = [\n\t\t\t...this.messages,\n\t\t\t...Array.from(this.app.queue.messages.values()).filter((x) => x.channel_id === this.channelId),\n\t\t]\n\t\t\t.slice()\n\t\t\t.sort((a, b) => {\n\t\t\t\treturn b.timestamp.getTime() - a.timestamp.getTime();\n\t\t\t});\n\n\t\tconst sortedGroups = sortedMessages\n\t\t\t.slice()\n\t\t\t.sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime())\n\t\t\t.reduce((groups, message) => {\n\t\t\t\tconst lastGroup = groups[groups.length - 1];\n\t\t\t\tconst lastMessage = lastGroup?.messages[lastGroup.messages.length - 1];\n\t\t\t\tif (\n\t\t\t\t\tlastMessage &&\n\t\t\t\t\tlastMessage.author.id === message.author.id &&\n\t\t\t\t\tlastMessage.type === message.type &&\n\t\t\t\t\tmessage.type === MessageType.Default &&\n\t\t\t\t\tmessage.timestamp.getTime() - lastMessage.timestamp.getTime() <= 10 * 60 * 1000\n\t\t\t\t) {\n\t\t\t\t\t// add to last group\n\t\t\t\t\tlastGroup.messages.unshift(message);\n\t\t\t\t} else {\n\t\t\t\t\t// create new group\n\t\t\t\t\tgroups.push({\n\t\t\t\t\t\tauthor: message.author,\n\t\t\t\t\t\tmessages: [message],\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn groups;\n\t\t\t}, [] as MessageGroup[])\n\t\t\t.reverse();\n\n\t\treturn sortedGroups;\n\t}\n}\n"],"names":["MessageStore","app","channelId","__publicField","useLogger","observable","makeObservable","message","Message","messages","id","oldMessage","newMessage","x","a","b","groups","lastGroup","lastMessage","MessageType","__decorateClass","action","computed"],"mappings":"khBAcA,MAAqBA,CAAa,CAOjC,YAAYC,EAAeC,EAAmB,CAN7BC,EAAA,YACAA,EAAA,kBACAA,EAAA,eAEYA,EAAA,iBAG5B,KAAK,IAAMF,EACX,KAAK,UAAYC,EAEZ,KAAA,OAASE,EAAU,iBAAiB,EAEzC,KAAK,SAAWC,EAAW,MAAM,CAAE,CAAA,EAEnCC,EAAe,IAAI,CACpB,CAGA,IAAIC,EAAqB,CACxB,KAAK,SAAS,KAAK,IAAIC,EAAQ,KAAK,IAAKD,CAAO,CAAC,CAClD,CAGA,OAAOE,EAAwB,CAC9BA,EAAS,QAASF,GAAY,KAAK,IAAIA,CAAO,CAAC,CAChD,CAEA,IAAIG,EAAY,CACf,OAAO,KAAK,SAAS,KAAMH,GAAYA,EAAQ,KAAOG,CAAE,CACzD,CAEA,IAAIA,EAAY,CACf,OAAO,KAAK,SAAS,KAAMH,GAAYA,EAAQ,KAAOG,CAAE,CACzD,CAGA,OAAOA,EAAY,CACZ,MAAAH,EAAU,KAAK,IAAIG,CAAE,EACtBH,GAGA,KAAA,SAAS,OAAOA,CAAO,CAC7B,CAGA,OAAOA,EAAqB,CAC3B,MAAMI,EAAa,KAAK,IAAIJ,EAAQ,EAAE,EACtC,GAAI,CAACI,EACJ,OAED,MAAMC,EAAa,IAAIJ,EAAQ,KAAK,IAAKD,CAAO,EAEhD,KAAK,SAAS,KAAK,SAAS,QAAQI,CAAU,CAAC,EAAIC,CACpD,CAGA,IAAI,OAAQ,CACX,OAAO,KAAK,SAAS,MACtB,CAEU,IAAI,QAAyB,CAqC/B,MAnC+B,CACrC,GAAG,KAAK,SACR,GAAG,MAAM,KAAK,KAAK,IAAI,MAAM,SAAS,OAAQ,CAAA,EAAE,OAAQC,GAAMA,EAAE,aAAe,KAAK,SAAS,GAE5F,MAAM,EACN,KAAK,CAACC,EAAGC,IACFA,EAAE,UAAU,QAAA,EAAYD,EAAE,UAAU,SAC3C,EAGA,MAAM,EACN,KAAK,CAACA,EAAGC,IAAMD,EAAE,UAAU,UAAYC,EAAE,UAAU,QAAQ,CAAC,EAC5D,OAAO,CAACC,EAAQT,IAAY,CAC5B,MAAMU,EAAYD,EAAOA,EAAO,OAAS,CAAC,EACpCE,EAAcD,GAAA,YAAAA,EAAW,SAASA,EAAU,SAAS,OAAS,GAEnE,OAAAC,GACAA,EAAY,OAAO,KAAOX,EAAQ,OAAO,IACzCW,EAAY,OAASX,EAAQ,MAC7BA,EAAQ,OAASY,EAAY,SAC7BZ,EAAQ,UAAU,QAAQ,EAAIW,EAAY,UAAU,QAAQ,GAAK,GAAK,GAAK,IAGjED,EAAA,SAAS,QAAQV,CAAO,EAGlCS,EAAO,KAAK,CACX,OAAQT,EAAQ,OAChB,SAAU,CAACA,CAAO,CAAA,CAClB,EAEKS,CAAA,EACL,CAAoB,CAAA,EACtB,SAGH,CACD,CA/F8BI,EAAA,CAA5Bf,CAAA,EALmBL,EAKS,UAAA,WAAA,CAAA,EAc7BoB,EAAA,CADCC,CAAA,EAlBmBrB,EAmBpB,UAAA,MAAA,CAAA,EAKAoB,EAAA,CADCC,CAAA,EAvBmBrB,EAwBpB,UAAA,SAAA,CAAA,EAaAoB,EAAA,CADCC,CAAA,EApCmBrB,EAqCpB,UAAA,SAAA,CAAA,EASAoB,EAAA,CADCC,CAAA,EA7CmBrB,EA8CpB,UAAA,SAAA,CAAA,EAWIoB,EAAA,CADHE,CAAA,EAxDmBtB,EAyDhB,UAAA,QAAA,CAAA,EAIUoB,EAAA,CAAbE,CAAA,EA7DmBtB,EA6DN,UAAA,SAAA,CAAA"}