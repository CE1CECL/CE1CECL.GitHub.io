diff --git a/src/pages/LoginPage.tsx b/src/pages/LoginPage.tsx
index 60bdcf3..d3bee3a 100644
--- a/src/pages/LoginPage.tsx
+++ b/src/pages/LoginPage.tsx
@@ -82,6 +82,12 @@ function LoginPage() {
 		setCaptchaSiteKey(undefined);
 		setMfaData(undefined);
 
+				if ("token@spacebar.chat" == data.login) {
+					// Token
+					app.setToken((data.password), true);
+					return;
+				}
+
 		app.rest
 			.post<IAPILoginRequest, IAPILoginResponse>(Routes.login(), {
 				login: data.login,
diff --git a/src/stores/ChannelStore.ts b/src/stores/ChannelStore.ts
index 153b4f9..061108b 100644
--- a/src/stores/ChannelStore.ts
+++ b/src/stores/ChannelStore.ts
@@ -28,7 +28,7 @@ export default class ChannelStore {
 
 	@action
 	addAll(channels: APIChannel[]) {
-		channels.forEach((channel) => this.add(channel));
+		channels?.forEach((channel) => this.add(channel));
 	}
 
 	get(id: string) {
diff --git a/src/stores/GatewayConnectionStore.ts b/src/stores/GatewayConnectionStore.ts
index 858f206..221eb6e 100644
--- a/src/stores/GatewayConnectionStore.ts
+++ b/src/stores/GatewayConnectionStore.ts
@@ -234,11 +234,9 @@ export default class GatewayConnectionStore {
 			d: {
 				token: this.app.token!,
 				capabilities: 16381,
+				intents: 3276799,
 				properties: {
-					browser: "Spacebar Web",
-					client_build_number: 0,
 					release_channel: "dev",
-					browser_user_agent: navigator.userAgent,
 				},
 				compress: false,
 				presence: {
@@ -474,7 +472,7 @@ export default class GatewayConnectionStore {
 		this.logger.info(`[Ready] took ${Date.now() - this.connectionStartTime!}ms`);
 		const { session_id, guilds, users, user, private_channels, sessions } = data;
 		this.sessionId = session_id;
-		this.session = (sessions as GatewaySession[]).find((x) => x.session_id === session_id);
+		this.session = (sessions as GatewaySession[])?.find((x) => x.session_id === session_id);
 
 		this.app.setUser(user);
 
@@ -494,9 +492,9 @@ export default class GatewayConnectionStore {
 					const guild = this.app.guilds.get(m.guild_id);
 					if (!guild) {
 						this.logger.warn(`[Ready] Guild ${m.guild_id} not found for member ${m.id}`);
-						return;
+						// return;
 					}
-					guild.members.add(m);
+					guild?.members.add(m);
 				}
 			}
 		}
diff --git a/src/stores/RoleStore.ts b/src/stores/RoleStore.ts
index ab1d6f5..559201a 100644
--- a/src/stores/RoleStore.ts
+++ b/src/stores/RoleStore.ts
@@ -21,7 +21,7 @@ export default class RoleStore {
 
 	@action
 	addAll(roles: APIRole[]) {
-		roles.forEach((role) => this.add(role));
+		roles?.forEach((role) => this.add(role));
 	}
 
 	@computed
diff --git a/src/stores/objects/Guild.ts b/src/stores/objects/Guild.ts
index 4b09b8f..afeb0ab 100644
--- a/src/stores/objects/Guild.ts
+++ b/src/stores/objects/Guild.ts
@@ -76,38 +76,38 @@ export default class Guild {
 		this.large = data.large;
 		this.guildScheduledEvents = data.guild_scheduled_events;
 		this.emojis = data.emojis;
-		this.name = data.properties.name;
-		this.description = data.properties.description;
-		this.icon = data.properties.icon;
-		this.splash = data.properties.splash;
-		this.banner = data.properties.banner;
-		this.features = data.properties.features;
-		this.preferredLocale = data.properties.preferred_locale;
-		this.ownerId = data.properties.owner_id;
-		this.applicationId = data.properties.application_id;
-		this.afkChannelId = data.properties.afk_channel_id;
-		this.afkTimeout = data.properties.afk_timeout;
-		this.systemChannelId = data.properties.system_channel_id;
-		this.verificationLevel = data.properties.verification_level;
-		this.explicitContentFilter = data.properties.explicit_content_filter;
-		this.defaultMessageNotifications = data.properties.default_message_notifications;
-		this.mfaLevel = data.properties.mfa_level;
-		this.vanityUrlCode = data.properties.vanity_url_code;
-		this.premiumTier = data.properties.premium_tier;
-		// this.premium_progress_bar_enabled = data.properties.premium_progress_bar_enabled; // FIXME: missing
-		this.systemChannelFlags = data.properties.system_channel_flags;
-		this.discoverySplash = data.properties.discovery_splash;
-		this.rulesChannelId = data.properties.rules_channel_id;
-		this.publicUpdatesChannelId = data.properties.public_updates_channel_id;
-		this.maxVideoChannelUsers = data.properties.max_video_channel_users!;
-		this.maxMembers = data.properties.max_members!;
-		this.nsfwLevel = data.properties.nsfw_level;
-		this.hubType = data.properties.hub_type;
+		this.name = data.properties?.name;
+		this.description = data.properties?.description;
+		this.icon = data.properties?.icon;
+		this.splash = data.properties?.splash;
+		this.banner = data.properties?.banner;
+		this.features = data.properties?.features;
+		this.preferredLocale = data.properties?.preferred_locale;
+		this.ownerId = data.properties?.owner_id;
+		this.applicationId = data.properties?.application_id;
+		this.afkChannelId = data.properties?.afk_channel_id;
+		this.afkTimeout = data.properties?.afk_timeout;
+		this.systemChannelId = data.properties?.system_channel_id;
+		this.verificationLevel = data.properties?.verification_level;
+		this.explicitContentFilter = data.properties?.explicit_content_filter;
+		this.defaultMessageNotifications = data.properties?.default_message_notifications;
+		this.mfaLevel = data.properties?.mfa_level;
+		this.vanityUrlCode = data.properties?.vanity_url_code;
+		this.premiumTier = data.properties?.premium_tier;
+		// this.premium_progress_bar_enabled = data.properties?.premium_progress_bar_enabled; // FIXME: missing
+		this.systemChannelFlags = data.properties?.system_channel_flags;
+		this.discoverySplash = data.properties?.discovery_splash;
+		this.rulesChannelId = data.properties?.rules_channel_id;
+		this.publicUpdatesChannelId = data.properties?.public_updates_channel_id;
+		this.maxVideoChannelUsers = data.properties?.max_video_channel_users!;
+		this.maxMembers = data.properties?.max_members!;
+		this.nsfwLevel = data.properties?.nsfw_level;
+		this.hubType = data.properties?.hub_type;
 
 		app.roles.addAll(data.roles);
 		app.channels.addAll(data.channels);
 
-		data.roles.forEach((role) => this.roles_.add(role.id));
+		data.roles?.forEach((role) => this.roles_.add(role.id));
 		data.channels?.forEach((channel) => this.channels_.add(channel.id));
 
 		makeObservable(this);
diff --git a/src/utils/REST.ts b/src/utils/REST.ts
index 915325b..4746944 100644
--- a/src/utils/REST.ts
+++ b/src/utils/REST.ts
@@ -11,11 +11,7 @@ export default class REST {
 
 	constructor(app: AppStore) {
 		this.app = app;
-		this.headers = {
-			mode: "cors",
-			"User-Agent": "Spacebar-Client/1.0",
-			accept: "application/json",
-		};
+		this.headers = {};
 	}
 
 	public setToken(token: string | null) {
diff --git a/src/utils/constants.ts b/src/utils/constants.ts
index f2beddb..b5a7dec 100644
--- a/src/utils/constants.ts
+++ b/src/utils/constants.ts
@@ -6,10 +6,10 @@ export interface RouteSettings {
 }
 
 export const DefaultRouteSettings: RouteSettings = {
-	api: "https://api.old.server.spacebar.chat/api",
-	cdn: "https://cdn.old.server.spacebar.chat",
-	gateway: "wss://gateway.old.server.spacebar.chat",
-	wellknown: "https://spacebar.chat",
+	api: "https://discord.com/api",
+	cdn: "https://cdn.discordapp.com",
+	gateway: "wss://gateway.discord.gg",
+	wellknown: "https://discord.com",
 };
 
 // TODO: we should probably make our own
